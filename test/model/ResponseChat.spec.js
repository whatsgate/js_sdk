/*
 * API whatsgate.ru
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiWhatsgateru);
  }
}(this, function(expect, ApiWhatsgateru) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ResponseChat', function() {
      beforeEach(function() {
        instance = new ApiWhatsgateru.ResponseChat();
      });

      it('should create an instance of ResponseChat', function() {
        // TODO: update the code to test ResponseChat
        expect(instance).to.be.a(ApiWhatsgateru.ResponseChat);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property isGroup (base name: "isGroup")', function() {
        // TODO: update the code to test the property isGroup
        expect(instance).to.have.property('isGroup');
        // expect(instance.isGroup).to.be(expectedValueLiteral);
      });

      it('should have the property isReadOnly (base name: "isReadOnly")', function() {
        // TODO: update the code to test the property isReadOnly
        expect(instance).to.have.property('isReadOnly');
        // expect(instance.isReadOnly).to.be(expectedValueLiteral);
      });

      it('should have the property unreadCount (base name: "unreadCount")', function() {
        // TODO: update the code to test the property unreadCount
        expect(instance).to.have.property('unreadCount');
        // expect(instance.unreadCount).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property pinned (base name: "pinned")', function() {
        // TODO: update the code to test the property pinned
        expect(instance).to.have.property('pinned');
        // expect(instance.pinned).to.be(expectedValueLiteral);
      });

      it('should have the property isMuted (base name: "isMuted")', function() {
        // TODO: update the code to test the property isMuted
        expect(instance).to.have.property('isMuted');
        // expect(instance.isMuted).to.be(expectedValueLiteral);
      });

      it('should have the property muteExpiration (base name: "muteExpiration")', function() {
        // TODO: update the code to test the property muteExpiration
        expect(instance).to.have.property('muteExpiration');
        // expect(instance.muteExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property groupMetadata (base name: "groupMetadata")', function() {
        // TODO: update the code to test the property groupMetadata
        expect(instance).to.have.property('groupMetadata');
        // expect(instance.groupMetadata).to.be(expectedValueLiteral);
      });

    });
  });

}));
